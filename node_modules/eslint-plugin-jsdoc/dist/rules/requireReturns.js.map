{"version":3,"sources":["../../src/rules/requireReturns.js"],"names":["canSkip","utils","hasATag","isConstructor","isSetter","avoidDocs","report","context","settings","options","tagName","getPreferredTagName","tags","getTags","length","tag","missingReturnTag","isAsync","hasReturnValue","forceReturnsWithAsync","forceRequireReturn","meta","schema","additionalProperties","properties","exemptedBy","items","type","default"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;AAEA;;;;;;;;;;;AAWA,MAAMA,OAAO,GAAIC,KAAD,IAAW;AACzB,SAAOA,KAAK,CAACC,OAAN,CAAc,CACnB;AACA;AACA;AACA;AACA;AACA,YANmB,EAOnB,SAPmB,EASnB;AACA;AACA,SAXmB,EAYnB,aAZmB,EAcnB;AACA,QAfmB,EAiBnB;AACA,aAlBmB,CAAd,KAoBLD,KAAK,CAACE,aAAN,EApBK,IAsBL;AACA;AACAF,EAAAA,KAAK,CAACG,QAAN,EAxBK,IAyBLH,KAAK,CAACI,SAAN,EAzBF;AA0BD,CA3BD;;eA6Be,2BAAa,CAAC;AAC3BC,EAAAA,MAD2B;AAE3BL,EAAAA,KAF2B;AAG3BM,EAAAA,OAH2B;AAI3BC,EAAAA;AAJ2B,CAAD,KAKtB;AACJ;AACA;AACA,MAAIR,OAAO,CAACC,KAAD,CAAX,EAAoB;AAClB;AACD;;AAED,QAAMQ,OAAO,GAAGF,OAAO,CAACE,OAAR,CAAgB,CAAhB,KAAsB,EAAtC;AAEA,QAAMC,OAAO,GAAGT,KAAK,CAACU,mBAAN,CAA0B,SAA1B,CAAhB;;AACA,MAAI,CAACD,OAAL,EAAc;AACZ;AACD;;AACD,QAAME,IAAI,GAAGX,KAAK,CAACY,OAAN,CAAcH,OAAd,CAAb;;AAEA,MAAIE,IAAI,CAACE,MAAL,GAAc,CAAlB,EAAqB;AACnBR,IAAAA,MAAM,CAAC,0BAA0BI,OAA1B,GAAoC,eAArC,CAAN;AACD,GAjBG,CAmBJ;;;AAnBI,+BAoBUE,IApBV;AAAA,QAoBGG,GApBH;;AAqBJ,QAAMC,gBAAgB,GAAG,OAAOD,GAAP,KAAe,WAAf,IAA8BA,GAAG,KAAK,IAA/D;;AACA,MAAIC,gBAAgB,KACjB,CAACf,KAAK,CAACgB,OAAN,MAAmB,CAAChB,KAAK,CAACiB,cAAN,CAAqB,IAArB,CAApB,GAAiDT,OAAO,CAACU,qBAAzD,GAAiFlB,KAAK,CAACiB,cAAN,EAAlF,KAA6GV,QAAQ,CAACY,kBADrG,CAApB,EAEE;AACAd,IAAAA,MAAM,CAAC,oBAAoBI,OAApB,GAA8B,eAA/B,CAAN;AACD;AACF,CAhCc,EAgCZ;AACDW,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,oBAAoB,EAAE,KADxB;AAEEC,MAAAA,UAAU,EAAE;AACVC,QAAAA,UAAU,EAAE;AACVC,UAAAA,KAAK,EAAE;AACLC,YAAAA,IAAI,EAAE;AADD,WADG;AAIVA,UAAAA,IAAI,EAAE;AAJI,SADF;AAOVR,QAAAA,qBAAqB,EAAE;AACrBS,UAAAA,OAAO,EAAE,KADY;AAErBD,UAAAA,IAAI,EAAE;AAFe;AAPb,OAFd;AAcEA,MAAAA,IAAI,EAAE;AAdR,KADM,CADJ;AAmBJA,IAAAA,IAAI,EAAE;AAnBF;AADL,CAhCY,C","sourcesContent":["import iterateJsdoc from '../iterateJsdoc';\n\n/**\n * We can skip checking for a return value, in case the documentation is inherited\n * or the method is either a constructor or an abstract method.\n *\n * In either of these cases the return value is optional or not defined.\n *\n * @param {*} utils\n *   a reference to the utils which are used to probe if a tag is present or not.\n * @returns {boolean}\n *   true in case deep checking can be skipped; otherwise false.\n */\nconst canSkip = (utils) => {\n  return utils.hasATag([\n    // inheritdoc implies that all documentation is inherited\n    // see https://jsdoc.app/tags-inheritdoc.html\n    //\n    // Abstract methods are by definition incomplete,\n    // so it is not an error if it declares a return value but does not implement it.\n    'abstract',\n    'virtual',\n\n    // Constructors do not have a return value by definition (https://jsdoc.app/tags-class.html)\n    // So we can bail out here, too.\n    'class',\n    'constructor',\n\n    // Return type is specified by type in @type\n    'type',\n\n    // This seems to imply a class as well\n    'interface'\n  ]) ||\n    utils.isConstructor() ||\n\n    // Though ESLint avoided getters: https://github.com/eslint/eslint/blob/master/lib/rules/valid-jsdoc.js#L435\n    //  ... getters seem that they should, unlike setters, always return:\n    utils.isSetter() ||\n    utils.avoidDocs();\n};\n\nexport default iterateJsdoc(({\n  report,\n  utils,\n  context,\n  settings\n}) => {\n  // A preflight check. We do not need to run a deep check\n  // in case the @returns comment is optional or undefined.\n  if (canSkip(utils)) {\n    return;\n  }\n\n  const options = context.options[0] || {};\n\n  const tagName = utils.getPreferredTagName('returns');\n  if (!tagName) {\n    return;\n  }\n  const tags = utils.getTags(tagName);\n\n  if (tags.length > 1) {\n    report('Found more than one @' + tagName + ' declaration.');\n  }\n\n  // In case the code returns something, we expect a return value in JSDoc.\n  const [tag] = tags;\n  const missingReturnTag = typeof tag === 'undefined' || tag === null;\n  if (missingReturnTag &&\n    ((utils.isAsync() && !utils.hasReturnValue(true) ? options.forceReturnsWithAsync : utils.hasReturnValue()) || settings.forceRequireReturn)\n  ) {\n    report('Missing JSDoc @' + tagName + ' declaration.');\n  }\n}, {\n  meta: {\n    schema: [\n      {\n        additionalProperties: false,\n        properties: {\n          exemptedBy: {\n            items: {\n              type: 'string'\n            },\n            type: 'array'\n          },\n          forceReturnsWithAsync: {\n            default: false,\n            type: 'boolean'\n          }\n        },\n        type: 'object'\n      }\n    ],\n    type: 'suggestion'\n  }\n});\n"],"file":"requireReturns.js"}