"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _iterateJsdoc = _interopRequireDefault(require("../iterateJsdoc"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _iterateJsdoc.default)(({
  sourceCode,
  jsdoc,
  report,
  utils,
  jsdocNode
}) => {
  if (!jsdoc.tags) {
    return;
  }

  jsdoc.tags.forEach(jsdocTag => {
    const tagName = jsdocTag.tag;

    if (utils.isValidTag(tagName)) {
      let preferredTagName = utils.getPreferredTagName(tagName, true, `Blacklisted tag found (\`@${tagName}\`)`);
      let message = `Invalid JSDoc tag (preference). Replace "${tagName}" JSDoc tag with "${preferredTagName}".`;

      if (!preferredTagName) {
        return;
      }

      if (preferredTagName && typeof preferredTagName === 'object') {
        var _preferredTagName = preferredTagName;
        message = _preferredTagName.message;
        preferredTagName = _preferredTagName.replacement;
      }

      if (preferredTagName !== tagName) {
        report(message, fixer => {
          const replacement = sourceCode.getText(jsdocNode).replace('@' + tagName, '@' + preferredTagName);
          return fixer.replaceText(jsdocNode, replacement);
        }, jsdocTag);
      }
    } else {
      report('Invalid JSDoc tag name "' + tagName + '".', null, jsdocTag);
    }
  });
}, {
  iterateAllJsdocs: true,
  meta: {
    fixable: 'code',
    type: 'suggestion'
  }
});

exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=checkTagNames.js.map