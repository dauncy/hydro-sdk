{"version":3,"sources":["../../src/rules/noUndefinedTypes.js"],"names":["extraTypes","stripPseudoTypes","str","replace","context","report","sourceCode","scopeManager","utils","globalScope","options","preferredTypesDefined","definedTypes","definedPreferredTypes","preferredTypes","_","get","values","map","preferredType","undefined","replacement","filter","typedefDeclarations","getAllComments","comment","value","startsWith","parseComment","flatMap","doc","tags","tag","isNamepathDefiningTag","name","templateTags","getPresentTags","classJsdoc","getClassJsdoc","concat","closureGenericTypes","jsdocUtils","parseClosureTemplateTag","allDefinedTypes","variables","variable","__options","nodejsScope","isModule","childScopes","reduce","arr","push","jsdocTags","filterTags","isTagWithType","forEach","parsedType","type","error","includes","markVariableAsUsed","meta","schema","additionalProperties","properties","items"],"mappings":"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","sourcesContent":["// eslint-disable-next-line import/no-unassigned-import\nimport 'flat-map-polyfill';\nimport _ from 'lodash';\nimport {parse as parseType, traverse} from 'jsdoctypeparser';\nimport iterateJsdoc, {parseComment} from '../iterateJsdoc';\nimport jsdocUtils from '../jsdocUtils';\n\nconst extraTypes = [\n  'null', 'undefined', 'string', 'boolean', 'object',\n  'function',\n  'number', 'NaN', 'Infinity',\n  'any', '*',\n  'Array', 'Object', 'RegExp', 'Date', 'Function'\n];\n\nconst stripPseudoTypes = (str) => {\n  return str && str.replace(/(?:\\.|<>|\\.<>|\\[])$/, '');\n};\n\nexport default iterateJsdoc(({\n  context,\n  report,\n  sourceCode: {scopeManager},\n  utils\n}) => {\n  const {globalScope} = scopeManager;\n\n  const {preferredTypesDefined, definedTypes = []} = context.options[0] || {};\n\n  let definedPreferredTypes = [];\n  if (preferredTypesDefined) {\n    const preferredTypes = _.get(context, 'settings.jsdoc.preferredTypes');\n    if (preferredTypes) {\n      // Replace `_.values` with `Object.values` when we may start requiring Node 7+\n      definedPreferredTypes = _.values(preferredTypes).map((preferredType) => {\n        if (typeof preferredType === 'string') {\n          // May become an empty string but will be filtered out below\n          return stripPseudoTypes(preferredType);\n        }\n        if (!preferredType) {\n          return undefined;\n        }\n        if (typeof preferredType !== 'object') {\n          report(\n            'Invalid `settings.jsdoc.preferredTypes`. Values must be falsy, a string, or an object.'\n          );\n        }\n\n        return stripPseudoTypes(preferredType.replacement);\n      }).filter((preferredType) => {\n        return preferredType;\n      });\n    }\n  }\n\n  const typedefDeclarations = _(context.getAllComments())\n    .filter((comment) => {\n      return comment.value.startsWith('*');\n    })\n    .map(parseComment)\n    .flatMap((doc) => {\n      return (doc.tags || []).filter(({tag}) => {\n        return utils.isNamepathDefiningTag(tag);\n      });\n    })\n    .map((tag) => {\n      return tag.name;\n    })\n    .value();\n\n  let templateTags = utils.getPresentTags('template');\n  const classJsdoc = utils.getClassJsdoc();\n  if (classJsdoc && classJsdoc.tags) {\n    templateTags = templateTags.concat(\n      classJsdoc.tags\n        .filter((tag) => {\n          return tag.tag === 'template';\n        })\n    );\n  }\n\n  const closureGenericTypes = templateTags.flatMap((tag) => {\n    return jsdocUtils.parseClosureTemplateTag(tag);\n  });\n\n  const allDefinedTypes = globalScope.variables.map((variable) => {\n    return variable.name;\n  })\n\n    // If the file is a module, concat the variables from the module scope.\n    .concat(\n\n      // This covers `commonjs` as well as `node`\n      scopeManager.__options.nodejsScope ||\n      scopeManager.isModule() ?\n        globalScope.childScopes.reduce((arr, {variables}) => {\n          // Flatten\n          arr.push(...variables);\n\n          return arr;\n        }, []).map(({name}) => {\n          return name;\n        }) : []\n    )\n    .concat(extraTypes)\n    .concat(typedefDeclarations)\n    .concat(definedTypes)\n    .concat(definedPreferredTypes)\n    .concat(closureGenericTypes);\n\n  const jsdocTags = utils.filterTags((tag) => {\n    return utils.isTagWithType(tag.tag);\n  });\n\n  jsdocTags.forEach((tag) => {\n    let parsedType;\n\n    try {\n      parsedType = parseType(tag.type);\n    } catch (error) {\n      // On syntax error, will be handled by valid-types.\n      return;\n    }\n\n    traverse(parsedType, ({type, name}) => {\n      if (type === 'NAME') {\n        if (!allDefinedTypes.includes(name)) {\n          report('The type \\'' + name + '\\' is undefined.', null, tag);\n        } else if (!_.includes(extraTypes, name)) {\n          context.markVariableAsUsed(name);\n        }\n      }\n    });\n  });\n}, {\n  meta: {\n    schema: [\n      {\n        additionalProperties: false,\n        properties: {\n          definedTypes: {\n            items: {\n              type: 'string'\n            },\n            type: 'array'\n          },\n          preferredTypesDefined: {\n            type: 'boolean'\n          }\n        },\n        type: 'object'\n      }\n    ],\n    type: 'suggestion'\n  }\n});\n"],"file":"noUndefinedTypes.js"}