{"version":3,"sources":["../../src/rules/checkTagNames.js"],"names":["sourceCode","jsdoc","report","utils","jsdocNode","tags","forEach","jsdocTag","tagName","tag","isValidTag","preferredTagName","getPreferredTagName","message","replacement","fixer","getText","replace","replaceText","iterateAllJsdocs","meta","fixable","type"],"mappings":";;;;;;;AAAA;;;;eAEe,2BAAa,CAAC;AAC3BA,EAAAA,UAD2B;AAE3BC,EAAAA,KAF2B;AAG3BC,EAAAA,MAH2B;AAI3BC,EAAAA,KAJ2B;AAK3BC,EAAAA;AAL2B,CAAD,KAMtB;AACJ,MAAI,CAACH,KAAK,CAACI,IAAX,EAAiB;AACf;AACD;;AACDJ,EAAAA,KAAK,CAACI,IAAN,CAAWC,OAAX,CAAoBC,QAAD,IAAc;AAC/B,UAAMC,OAAO,GAAGD,QAAQ,CAACE,GAAzB;;AACA,QAAIN,KAAK,CAACO,UAAN,CAAiBF,OAAjB,CAAJ,EAA+B;AAC7B,UAAIG,gBAAgB,GAAGR,KAAK,CAACS,mBAAN,CACrBJ,OADqB,EAErB,IAFqB,EAGpB,6BAA4BA,OAAQ,KAHhB,CAAvB;AAKA,UAAIK,OAAO,GAAI,4CAA2CL,OAAQ,qBAAoBG,gBAAiB,IAAvG;;AACA,UAAI,CAACA,gBAAL,EAAuB;AACrB;AACD;;AACD,UAAIA,gBAAgB,IAAI,OAAOA,gBAAP,KAA4B,QAApD,EAA8D;AAAA,gCAChBA,gBADgB;AAC1DE,QAAAA,OAD0D,qBAC1DA,OAD0D;AACpCF,QAAAA,gBADoC,qBACjDG,WADiD;AAE7D;;AAED,UAAIH,gBAAgB,KAAKH,OAAzB,EAAkC;AAChCN,QAAAA,MAAM,CAACW,OAAD,EAAWE,KAAD,IAAW;AACzB,gBAAMD,WAAW,GAAGd,UAAU,CAACgB,OAAX,CAAmBZ,SAAnB,EAA8Ba,OAA9B,CAAsC,MAAMT,OAA5C,EAAqD,MAAMG,gBAA3D,CAApB;AAEA,iBAAOI,KAAK,CAACG,WAAN,CAAkBd,SAAlB,EAA6BU,WAA7B,CAAP;AACD,SAJK,EAIHP,QAJG,CAAN;AAKD;AACF,KArBD,MAqBO;AACLL,MAAAA,MAAM,CAAC,6BAA6BM,OAA7B,GAAuC,IAAxC,EAA8C,IAA9C,EAAoDD,QAApD,CAAN;AACD;AACF,GA1BD;AA2BD,CArCc,EAqCZ;AACDY,EAAAA,gBAAgB,EAAE,IADjB;AAEDC,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE,MADL;AAEJC,IAAAA,IAAI,EAAE;AAFF;AAFL,CArCY,C","sourcesContent":["import iterateJsdoc from '../iterateJsdoc';\n\nexport default iterateJsdoc(({\n  sourceCode,\n  jsdoc,\n  report,\n  utils,\n  jsdocNode\n}) => {\n  if (!jsdoc.tags) {\n    return;\n  }\n  jsdoc.tags.forEach((jsdocTag) => {\n    const tagName = jsdocTag.tag;\n    if (utils.isValidTag(tagName)) {\n      let preferredTagName = utils.getPreferredTagName(\n        tagName,\n        true,\n        `Blacklisted tag found (\\`@${tagName}\\`)`\n      );\n      let message = `Invalid JSDoc tag (preference). Replace \"${tagName}\" JSDoc tag with \"${preferredTagName}\".`;\n      if (!preferredTagName) {\n        return;\n      }\n      if (preferredTagName && typeof preferredTagName === 'object') {\n        ({message, replacement: preferredTagName} = preferredTagName);\n      }\n\n      if (preferredTagName !== tagName) {\n        report(message, (fixer) => {\n          const replacement = sourceCode.getText(jsdocNode).replace('@' + tagName, '@' + preferredTagName);\n\n          return fixer.replaceText(jsdocNode, replacement);\n        }, jsdocTag);\n      }\n    } else {\n      report('Invalid JSDoc tag name \"' + tagName + '\".', null, jsdocTag);\n    }\n  });\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    fixable: 'code',\n    type: 'suggestion'\n  }\n});\n"],"file":"checkTagNames.js"}