{"version":3,"sources":["../../src/rules/noTypes.js"],"names":["utils","report","tags","getPresentTags","forEach","tag","type","meta"],"mappings":";;;;;;;AAAA;;;;eAEe,2BAAa,CAAC;AAC3BA,EAAAA,KAD2B;AAE3BC,EAAAA;AAF2B,CAAD,KAGtB;AACJ,QAAMC,IAAI,GAAGF,KAAK,CAACG,cAAN,CAAqB,CAAC,OAAD,EAAU,KAAV,EAAiB,UAAjB,EAA6B,SAA7B,EAAwC,QAAxC,CAArB,CAAb;AAEAD,EAAAA,IAAI,CAACE,OAAL,CAAcC,GAAD,IAAS;AACpB,QAAIA,GAAG,CAACC,IAAR,EAAc;AACZL,MAAAA,MAAM,CAAE,+BAA8BI,GAAG,CAACA,GAAI,GAAxC,EAA4C,IAA5C,EAAkDA,GAAlD,CAAN;AACD;AACF,GAJD;AAKD,CAXc,EAWZ;AACDE,EAAAA,IAAI,EAAE;AACJD,IAAAA,IAAI,EAAE;AADF;AADL,CAXY,C","sourcesContent":["import iterateJsdoc from '../iterateJsdoc';\n\nexport default iterateJsdoc(({\n  utils,\n  report\n}) => {\n  const tags = utils.getPresentTags(['param', 'arg', 'argument', 'returns', 'return']);\n\n  tags.forEach((tag) => {\n    if (tag.type) {\n      report(`Types are not permitted on @${tag.tag}.`, null, tag);\n    }\n  });\n}, {\n  meta: {\n    type: 'suggestion'\n  }\n});\n"],"file":"noTypes.js"}