{"version":3,"sources":["../../src/rules/checkExamples.js"],"names":["zeroBasedLineIndexAdjust","likelyNestedJSDocIndentSpace","preTagSpaceLength","hasCaptionRegex","escapeStringRegexp","str","replace","countChars","ch","match","RegExp","length","report","utils","settings","exampleCodeRegex","rejectExampleCodeRegex","noDefaultExampleRules","eslintrcForExamples","filename","matchingFileName","baseConfig","configFile","allowInlineConfig","reportUnusedDisableDirectives","rulePaths","rules","undefined","forEachPreferredTag","tag","targetTagName","initialTag","source","initialTagLength","firstLinePrefixLength","slice","captionRequired","test","nonJSPrefacingLines","nonJSPrefacingCols","idx","search","preMatchLines","preMatch","colDelta","lastIndexOf","n0","n1","nonJSPreface","nonJSPrefaceLineCount","index","indexOf","charsInLastLine","cli","CLIEngine","useEslintrc","messages","config","getConfigForFile","cliFile","linter","Linter","executeOnText","error","linterRules","getRules","entries","reduce","obj","key","val","defineRules","parser","defineParser","require","verify","results","codeStartLine","line","codeStartCol","forEach","message","column","severity","ruleId","startLine","startCol","meta","type","returns"],"mappings":"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","sourcesContent":["import {CLIEngine, Linter} from 'eslint';\nimport escapeRegexString from 'escape-regex-string';\nimport iterateJsdoc from '../iterateJsdoc';\n\nconst zeroBasedLineIndexAdjust = -1;\nconst likelyNestedJSDocIndentSpace = 1;\nconst preTagSpaceLength = 1;\nconst hasCaptionRegex = /^\\s*<caption>.*?<\\/caption>/;\n\nconst escapeStringRegexp = (str) => {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n};\nconst countChars = (str, ch) => {\n  return (str.match(new RegExp(escapeStringRegexp(ch), 'g')) || []).length;\n};\n\nexport default iterateJsdoc(({\n  report,\n  utils,\n  settings\n}) => {\n  let {exampleCodeRegex, rejectExampleCodeRegex} = settings;\n  const {\n    noDefaultExampleRules,\n    eslintrcForExamples,\n    matchingFileName: filename,\n    baseConfig,\n    configFile,\n    allowInlineConfig,\n    reportUnusedDisableDirectives\n  } = settings;\n\n  // Make this configurable?\n  const rulePaths = [];\n\n  const rules = noDefaultExampleRules ? undefined : {\n    // \"always\" newline rule at end unlikely in sample code\n    'eol-last': 0,\n\n    // Wouldn't generally expect example paths to resolve relative to JS file\n    'import/no-unresolved': 0,\n\n    // Snippets likely too short to always include import/export info\n    'import/unambiguous': 0,\n\n    // Unlikely to have inadvertent debugging within examples\n    'no-console': 0,\n\n    // Many variables in examples will be `undefined`\n    'no-undef': 0,\n\n    // Common to define variables for clarity without always using them\n    'no-unused-vars': 0,\n\n    // See import/no-unresolved\n    'node/no-missing-import': 0,\n    'node/no-missing-require': 0,\n\n    // Can generally look nicer to pad a little even if code imposes more stringency\n    'padded-blocks': 0\n  };\n\n  exampleCodeRegex = exampleCodeRegex && new RegExp(exampleCodeRegex, '');\n  rejectExampleCodeRegex = rejectExampleCodeRegex && new RegExp(rejectExampleCodeRegex, '');\n\n  utils.forEachPreferredTag('example', (tag, targetTagName) => {\n    // If a space is present, we should ignore it\n    const initialTag = tag.source.match(\n      new RegExp('^@' + escapeRegexString(targetTagName) + ' ?', 'u')\n    );\n    const initialTagLength = initialTag[0].length;\n    const firstLinePrefixLength = preTagSpaceLength + initialTagLength;\n\n    let source = tag.source.slice(initialTagLength);\n    const match = source.match(hasCaptionRegex);\n\n    if (settings.captionRequired && !match) {\n      report('Caption is expected for examples.', null, tag);\n    }\n\n    // If we allow newlines in hasCaptionRegex, we should add to line count\n    source = source.replace(hasCaptionRegex, '');\n\n    if (exampleCodeRegex && !exampleCodeRegex.test(source) ||\n      rejectExampleCodeRegex && rejectExampleCodeRegex.test(source)\n    ) {\n      return;\n    }\n\n    let nonJSPrefacingLines = 0;\n    let nonJSPrefacingCols = 0;\n\n    if (exampleCodeRegex) {\n      const idx = source.search(exampleCodeRegex);\n\n      // Strip out anything preceding user regex match (can affect line numbering)\n      let preMatchLines = 0;\n\n      const preMatch = source.slice(0, idx);\n\n      preMatchLines = countChars(preMatch, '\\n');\n\n      nonJSPrefacingLines = preMatchLines;\n\n      const colDelta = preMatchLines ?\n        preMatch.slice(preMatch.lastIndexOf('\\n') + 1).length - initialTagLength :\n        preMatch.length;\n\n      // Get rid of text preceding user regex match (even if it leaves valid JS, it\n      //   could cause us to count newlines twice)\n      source = source.slice(idx);\n\n      source = source.replace(exampleCodeRegex, (n0, n1) => {\n        let nonJSPreface;\n        let nonJSPrefaceLineCount;\n        if (n1) {\n          const index = n0.indexOf(n1);\n          nonJSPreface = n0.slice(0, index);\n          nonJSPrefaceLineCount = countChars(nonJSPreface, '\\n');\n        } else {\n          nonJSPreface = '';\n          nonJSPrefaceLineCount = 0;\n        }\n\n        nonJSPrefacingLines += nonJSPrefaceLineCount;\n\n        // Ignore `preMatch` delta if newlines here\n        if (nonJSPrefaceLineCount) {\n          const charsInLastLine = nonJSPreface.slice(nonJSPreface.lastIndexOf('\\n') + 1).length;\n\n          nonJSPrefacingCols += charsInLastLine - initialTagLength;\n        } else {\n          nonJSPrefacingCols += colDelta + nonJSPreface.length;\n        }\n\n        return n1 || n0;\n      });\n    }\n\n    // Programmatic ESLint API: https://eslint.org/docs/developer-guide/nodejs-api\n    const cli = new CLIEngine({\n      allowInlineConfig,\n      baseConfig,\n      configFile,\n      reportUnusedDisableDirectives,\n      rulePaths,\n      rules,\n      useEslintrc: eslintrcForExamples\n    });\n\n    let messages;\n\n    if (filename) {\n      const config = cli.getConfigForFile(filename);\n\n      // We need a new instance to ensure that the rules that may only\n      //  be available to `filename` (if it has its own `.eslintrc`),\n      //  will be defined.\n      const cliFile = new CLIEngine({\n        allowInlineConfig,\n        baseConfig: config,\n        configFile,\n        reportUnusedDisableDirectives,\n        rulePaths,\n        rules,\n        useEslintrc: eslintrcForExamples\n      });\n\n      const linter = new Linter();\n\n      // Force external rules to become available on `cli`\n      try {\n        cliFile.executeOnText('');\n      } catch (error) {\n        // Ignore\n      }\n\n      const linterRules = [...cliFile.getRules().entries()].reduce((obj, [key, val]) => {\n        obj[key] = val;\n\n        return obj;\n      }, {});\n\n      linter.defineRules(linterRules);\n\n      if (config.parser) {\n        // eslint-disable-next-line global-require, import/no-dynamic-require\n        linter.defineParser(config.parser, require(config.parser));\n      }\n\n      // Could also support `disableFixes` and `allowInlineConfig`\n      messages = linter.verify(source, config, {\n        filename,\n        reportUnusedDisableDirectives\n      });\n    } else {\n      ({results: [{messages}]} =\n        cli.executeOnText(source));\n    }\n\n    // NOTE: `tag.line` can be 0 if of form `/** @tag ... */`\n    const codeStartLine = tag.line + nonJSPrefacingLines;\n    const codeStartCol = likelyNestedJSDocIndentSpace;\n\n    messages.forEach(({message, line, column, severity, ruleId}) => {\n      const startLine = codeStartLine + line + zeroBasedLineIndexAdjust;\n      const startCol = codeStartCol + (\n\n        // This might not work for line 0, but line 0 is unlikely for examples\n        line <= 1 ? nonJSPrefacingCols + firstLinePrefixLength : preTagSpaceLength\n      ) + column;\n\n      // Could perhaps make fixable\n      report(\n        '@' + targetTagName + ' ' + (severity === 2 ? 'error' : 'warning') +\n          (ruleId ? ' (' + ruleId + ')' : '') + ': ' +\n          message,\n        null,\n        {\n          column: startCol,\n          line: startLine\n        }\n      );\n    });\n  });\n}, {\n  meta: {\n    type: 'suggestion'\n  },\n  returns: [\n    'ArrowFunctionExpression',\n    'ClassDeclaration',\n    'FunctionDeclaration',\n    'FunctionExpression'\n  ]\n});\n"],"file":"checkExamples.js"}